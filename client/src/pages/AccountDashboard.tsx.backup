import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useAuth } from "@/context/AuthContext";
import { useToast } from "@/hooks/use-toast";
import { Loader2, User, Heart, ShoppingBag, LogOut, Image as ImageIcon, Pencil, Trash2, Check, X, ShoppingCart, MapPin, Phone, Mail, Home, Eye, EyeOff, Package, Lock, Star, Award, TrendingUp, Calendar, CreditCard, Truck, Shield, Sparkles, ArrowRight, Gift } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useLocation, Link } from "wouter";
import { ShopLogo } from "@/components/ui/shop-logo";

interface OrderItem {
  id: number;
  productId: number;
  size: string;
  quantity: number;
  price: number;
  isFree?: boolean;
  product?: {
    name: string;
    image?: string;
    slug?: string;
  };
}

interface Order {
  id: number;
  status: string;
  total: number;
  free_shipping?: boolean;
  promoApplied?: boolean;
  paymentMethod?: string;
  createdAt: string;
  items?: OrderItem[];
}

interface WishlistItem {
  id: number;
  productId: number;
  product?: {
    name: string;
    price: number;
    image?: string;
  };
}

// List of major Moroccan cities (sorted A-Z)
const MOROCCO_CITIES = [
  "Casablanca", "Rabat", "Fès", "Marrakech", "Agadir", "Tangier", "Meknès", "Oujda", "Kenitra", "Tetouan", "Safi", "Mohammedia", "Khouribga", "El Jadida", "Beni Mellal", "Aït Melloul", "Nador", "Taza", "Settat", "Berrechid", "Khemisset", "Inezgane", "Ksar El Kebir", "Larache", "Guelmim", "Khenifra", "Berkane", "Taourirt", "Bouskoura", "Fquih Ben Salah", "Dcheira El Jihadia", "Oued Zem", "Sidi Slimane", "Errachidia", "Guercif", "Oued Zem", "Sidi Kacem", "Taroudant", "Essaouira", "Tiflet", "Sidi Bennour", "Tiznit", "Tan-Tan", "Ouazzane", "Sefrou", "Youssoufia", "Martil", "Ain Harrouda", "Ait Ourir", "Ain El Aouda", "Ain Taoujdate", "Azrou", "Beni Ansar", "Beni Yakhlef", "Ben Guerir", "Boujdour", "Bouknadel", "Boulemane", "Bouznika", "Chefchaouen", "Demnate", "Drarga", "El Aioun Sidi Mellouk", "El Hajeb", "El Kelaa des Sraghna", "El Ksiba", "Fnideq", "Harhoura", "Imzouren", "Jerada", "Kasba Tadla", "Ksar es Souk", "Laayoune", "Lqliaa", "M'diq", "Midelt", "Ouarzazate", "Oulad Teima", "Oulad Tayeb", "Oulad Yaich", "Sidi Ifni", "Skhirat", "Souk El Arbaa", "Tamesna", "Taza", "Zagora"
].sort((a, b) => a.localeCompare(b));

export default function AccountDashboard() {
  const { user, logout } = useAuth();
  const { toast } = useToast();
  const [orders, setOrders] = useState<Order[]>([]);
  const [wishlist, setWishlist] = useState<WishlistItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [userInfo, setUserInfo] = useState({ username: "", fullname: "", phone: "", address: "", city: "", postalCode: "", email: "" });
  const [, setLocation] = useLocation();
  const [isSaving, setIsSaving] = useState(false);
  const [showPasswordInput, setShowPasswordInput] = useState(false);
  const [newPassword, setNewPassword] = useState("");
  const [currentPassword, setCurrentPassword] = useState("");
  const [isSavingPassword, setIsSavingPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [passwordError, setPasswordError] = useState("");

  useEffect(() => {
    let mounted = true;
    const fetchUserData = async () => {
      try {
        setIsLoading(true);
        // Always try to fetch user info first
        const userData = await apiRequest("GET", "/api/me");
        if (mounted) setUserInfo({
          username: userData.username || "",
          fullname: userData.fullname || "",
          phone: userData.phone || "",
          address: userData.address || "",
          city: userData.city || "",
          postalCode: userData.postalCode || "",
          email: userData.email || "",
        });

        // Fetch orders and wishlist in parallel, and show error toasts if they fail
        const [ordersData, wishlistData] = await Promise.all([
          apiRequest("GET", "/api/my-orders").catch((err) => { toast({ title: "Erreur", description: "Impossible de charger vos commandes", variant: "destructive" }); return []; }),
          apiRequest("GET", "/api/wishlist").catch((err) => { toast({ title: "Erreur", description: "Impossible de charger votre liste de souhaits", variant: "destructive" }); return []; }),
        ]);
        if (mounted) {
        setOrders(ordersData);
        setWishlist(wishlistData);
        }
      } catch (error) {
         if (mounted) {
           toast({ title: "Erreur", description: "Impossible de charger vos informations", variant: "destructive" });
         }
      } finally {
         if (mounted) setIsLoading(false);
      }
    };

    if (user) {
      fetchUserData();
    } else {
      // (9) Redirect if not authenticated
      setLocation("/login");
    }

    return () => { mounted = false; };
  }, [user, setLocation, toast]);

  const handleUpdateInfo = async () => {
    setIsSaving(true);
    try {
      const res = await apiRequest("PUT", "/api/me", userInfo);
      // (8) Display backend error message if available (e.g. res.error)
      if (res && res.error) {
         toast({ title: "Erreur", description: res.error, variant: "destructive" });
      } else {
      setIsEditing(false);
         toast({ title: "Succès", description: "Vos informations ont été mises à jour" });
         // (2) Re-fetch user info after update
         const userData = await apiRequest("GET", "/api/me");
         setUserInfo({
           username: userData.username || "",
           fullname: userData.fullname || "",
           phone: userData.phone || "",
           address: userData.address || "",
           city: userData.city || "",
           postalCode: userData.postalCode || "",
           email: userData.email || "",
      });
      }
    } catch (error) {
      toast({ title: "Erreur", description: "Impossible de mettre à jour vos informations", variant: "destructive" });
    } finally {
      setIsSaving(false);
    }
  };

  const handleLogout = async () => {
    await logout();
    setLocation("/");
  };

  // Helper for status badge color and label (French, colorful)
  const getStatusBadge = (status: string) => {
    switch (status) {
      case "pending":
        return <span className="inline-block px-3 py-0.5 rounded-full text-xs font-bold border-2 border-yellow-400 bg-yellow-100 text-yellow-800 shadow-sm text-center">En attente</span>;
      case "processing":
        return <span className="inline-block px-3 py-0.5 rounded-full text-xs font-bold border-2 border-blue-400 bg-blue-100 text-blue-800 shadow-sm text-center">En traitement</span>;
      case "shipped":
        return <span className="inline-block px-3 py-0.5 rounded-full text-xs font-bold border-2 border-purple-400 bg-purple-100 text-purple-800 shadow-sm text-center">Expédiée</span>;
      case "delivered":
        return <span className="inline-block px-3 py-0.5 rounded-full text-xs font-bold border-2 border-green-500 bg-green-100 text-green-800 shadow-sm text-center">Livrée</span>;
      case "cancelled":
        return <span className="inline-block px-3 py-0.5 rounded-full text-xs font-bold border-2 border-red-400 bg-red-100 text-red-800 shadow-sm text-center">Annulée</span>;
      default:
        return <span className="inline-block px-3 py-0.5 rounded-full text-xs font-bold border-2 border-gray-400 bg-gray-100 text-gray-700 shadow-sm text-center">{status}</span>;
    }
  };

  // Helper to format date as DD/MM/YYYY
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  };

  // Add handler to remove from wishlist
  const handleRemoveFromWishlist = async (productId: number) => {
    try {
      await apiRequest("DELETE", `/api/wishlist/${productId}`);
      setWishlist((prev) => prev.filter((item) => item.productId !== productId));
      toast({ title: "Retiré de la liste de souhaits", description: "Ce produit a été retiré de votre liste de souhaits." });
    } catch (error: any) {
      toast({ title: "Erreur", description: error?.message || "Impossible de retirer de la liste de souhaits", variant: "destructive" });
    }
  };

  // Replace the validatePassword function with this simpler version
  const validatePassword = () => {
    if (currentPassword === newPassword) {
      setPasswordError("Le nouveau mot de passe doit être différent de l'ancien");
      return false;
    }
    setPasswordError("");
    return true;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
        <div className="text-center">
          <div className="relative">
            <div className="w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto"></div>
            <div className="absolute inset-0 w-16 h-16 border-4 border-transparent border-t-blue-400 rounded-full animate-spin mx-auto" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>
          </div>
          <p className="mt-4 text-slate-600 font-medium">Chargement de votre espace personnel...</p>
        </div>
      </div>
    );
  }

  if (!user) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 font-sans">
      {/* Enhanced Header with Glass Morphism */}
      <header className="sticky top-0 z-50 backdrop-blur-xl bg-white/80 border-b border-white/20 shadow-lg">
        <div className="container mx-auto px-6 py-4 flex items-center justify-between">
          <Link href="/">
            <a className="flex items-center gap-3 group">
              <div className="relative">
                <ShopLogo className="h-10 w-auto text-slate-800 group-hover:scale-105 transition-transform duration-300" />
                <div className="absolute inset-0 bg-gradient-to-r from-blue-500 to-purple-600 opacity-0 group-hover:opacity-20 rounded-lg blur-sm transition-opacity duration-300"></div>
              </div>
              <span className="text-slate-600 font-medium hidden sm:block">Retour à l'accueil</span>
            </a>
          </Link>
          <div className="flex items-center gap-4">
            <Button
              onClick={handleLogout}
              className="group flex items-center gap-2 bg-gradient-to-r from-slate-800 to-slate-900 hover:from-slate-700 hover:to-slate-800 text-white border-none shadow-lg hover:shadow-xl transition-all duration-300 px-6 py-2.5 rounded-xl"
            >
              <LogOut className="h-4 w-4 group-hover:rotate-12 transition-transform duration-300" />
              <span className="font-medium">Déconnexion</span>
            </Button>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-6 py-8">
        {/* Welcome Hero Section */}
        <div className="mb-8">
          <div className="relative overflow-hidden rounded-3xl bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 p-8 text-white">
            <div className="absolute inset-0 bg-black/10"></div>
            <div className="absolute top-0 right-0 w-64 h-64 bg-white/10 rounded-full -translate-y-32 translate-x-32"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-white/5 rounded-full translate-y-24 -translate-x-24"></div>
            <div className="relative z-10">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 bg-white/20 rounded-xl backdrop-blur-sm">
                  <Sparkles className="h-6 w-6" />
                </div>
                <h1 className="text-3xl md:text-4xl font-bold">Bienvenue, {userInfo.fullname || userInfo.username}!</h1>
              </div>
              <p className="text-blue-100 text-lg mb-6 max-w-2xl">
                Gérez vos commandes, suivez vos achats et personnalisez votre profil depuis votre espace personnel.
              </p>
              <div className="flex flex-wrap gap-4">
                <div className="flex items-center gap-2 bg-white/20 backdrop-blur-sm rounded-xl px-4 py-2">
                  <ShoppingBag className="h-5 w-5" />
                  <span className="font-medium">{orders.length} commande{orders.length !== 1 ? 's' : ''}</span>
                </div>
                <div className="flex items-center gap-2 bg-white/20 backdrop-blur-sm rounded-xl px-4 py-2">
                  <Heart className="h-5 w-5" />
                  <span className="font-medium">{wishlist.length} favori{wishlist.length !== 1 ? 's' : ''}</span>
                </div>
                <div className="flex items-center gap-2 bg-white/20 backdrop-blur-sm rounded-xl px-4 py-2">
                  <Award className="h-5 w-5" />
                  <span className="font-medium">Membre Premium</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-4 gap-8">
          {/* Profile Section - Left Column */}
          <div className="xl:col-span-1">
            {/* Enhanced Profile Card */}
            <Card className="group relative overflow-hidden bg-white/80 backdrop-blur-sm border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:-translate-y-2">
              <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 via-purple-500/5 to-indigo-500/5"></div>
              <CardContent className="relative p-6">
                {/* Profile Header */}
                <div className="text-center mb-6">
                  <div className="relative inline-block">
                    <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-2xl font-bold shadow-lg">
                      {(userInfo.fullname || userInfo.username || 'U').charAt(0).toUpperCase()}
                    </div>
                    <div className="absolute -top-1 -right-1 w-6 h-6 bg-green-500 rounded-full border-2 border-white flex items-center justify-center">
                      <div className="w-2 h-2 bg-white rounded-full"></div>
                    </div>
                  </div>
                  <h3 className="text-xl font-bold text-slate-800 mt-4 mb-1">{userInfo.fullname || userInfo.username}</h3>
                  <p className="text-slate-500 text-sm">@{userInfo.username}</p>
                  {isEditing && (
                    <div className="mt-3 inline-flex items-center gap-2 bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-xs font-medium">
                      <Pencil className="h-3 w-3 animate-pulse" />
                      Édition en cours
                    </div>
                  )}
                </div>
                
                {/* Profile Information */}
                {isEditing ? (
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 gap-4">
                      <div className="relative">
                        <label className="block text-sm font-medium text-slate-700 mb-2">Nom d'utilisateur</label>
                        <div className="relative">
                          <User className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                          <Input 
                            value={userInfo.username || ""} 
                            onChange={e => setUserInfo({ ...userInfo, username: e.target.value })} 
                            placeholder="Nom d'utilisateur" 
                            className="pl-10 bg-slate-50 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl" 
                          />
                        </div>
                      </div>
                      
                      <div className="relative">
                        <label className="block text-sm font-medium text-slate-700 mb-2">Nom complet</label>
                        <div className="relative">
                          <User className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                          <Input 
                            value={userInfo.fullname || ""} 
                            onChange={e => setUserInfo({ ...userInfo, fullname: e.target.value })} 
                            placeholder="Nom complet" 
                            className="pl-10 bg-slate-50 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl" 
                          />
                        </div>
                      </div>
                      
                      <div className="relative">
                        <label className="block text-sm font-medium text-slate-700 mb-2">Email</label>
                        <div className="relative">
                          <Mail className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                          <Input 
                            value={userInfo.email || ""} 
                            disabled 
                            placeholder="Email" 
                            className="pl-10 bg-slate-100 border-slate-200 text-slate-500 cursor-not-allowed rounded-xl" 
                          />
                        </div>
                      </div>
                      
                      <div className="relative">
                        <label className="block text-sm font-medium text-slate-700 mb-2">Téléphone</label>
                        <div className="relative">
                          <Phone className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                          <Input 
                            value={userInfo.phone || ""} 
                            onChange={e => setUserInfo({ ...userInfo, phone: e.target.value })} 
                            placeholder="Téléphone" 
                            className="pl-10 bg-slate-50 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl" 
                          />
                        </div>
                      </div>
                      
                      <div className="relative">
                        <label className="block text-sm font-medium text-slate-700 mb-2">Adresse</label>
                        <div className="relative">
                          <Home className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                          <Input 
                            value={userInfo.address || ""} 
                            onChange={e => setUserInfo({ ...userInfo, address: e.target.value })} 
                            placeholder="Adresse" 
                            className="pl-10 bg-slate-50 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl" 
                          />
                        </div>
                      </div>
                      
                      <div className="relative">
                        <label className="block text-sm font-medium text-slate-700 mb-2">Ville</label>
                        <div className="relative">
                          <MapPin className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2 z-10" />
                          <select
                            value={userInfo.city || ""}
                            onChange={e => setUserInfo({ ...userInfo, city: e.target.value })}
                            className="pl-10 w-full bg-slate-50 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl py-2.5 appearance-none"
                          >
                            <option value="">Sélectionnez une ville</option>
                            {MOROCCO_CITIES.map(city => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                          </select>
                        </div>
                      </div>
                      
                      <div className="relative">
                        <label className="block text-sm font-medium text-slate-700 mb-2">Code Postal</label>
                        <div className="relative">
                          <Package className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                          <Input 
                            value={userInfo.postalCode || ""} 
                            onChange={e => setUserInfo({ ...userInfo, postalCode: e.target.value })} 
                            placeholder="Code Postal" 
                            className="pl-10 bg-slate-50 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl" 
                          />
                        </div>
                      </div>
                    </div>
                    
                    {/* Password Section */}
                    <div className="mt-6 p-4 bg-slate-50 rounded-xl border border-slate-200">
                      <h4 className="text-sm font-semibold text-slate-700 mb-4 flex items-center gap-2">
                        <Shield className="h-4 w-4" />
                        Changer le mot de passe
                      </h4>
                      <div className="space-y-3">
                        <div className="relative">
                          <label className="block text-xs font-medium text-slate-600 mb-1">Mot de passe actuel</label>
                          <div className="relative">
                            <Lock className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                            <input
                              type={showCurrentPassword ? "text" : "password"}
                              value={currentPassword}
                              onChange={e => {
                                setCurrentPassword(e.target.value);
                                setPasswordError("");
                              }}
                              placeholder="Mot de passe actuel"
                              className="pl-10 pr-10 py-2 w-full bg-white border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-lg text-sm"
                            />
                            <button
                              type="button"
                              onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                              className="absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600"
                            >
                              {showCurrentPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                            </button>
                          </div>
                        </div>
                        <div className="relative">
                          <label className="block text-xs font-medium text-slate-600 mb-1">Nouveau mot de passe</label>
                          <div className="relative">
                            <Lock className="h-4 w-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                            <input
                              type={showNewPassword ? "text" : "password"}
                              value={newPassword}
                              onChange={e => {
                                setNewPassword(e.target.value);
                                setPasswordError("");
                              }}
                              placeholder="Nouveau mot de passe"
                              className="pl-10 pr-10 py-2 w-full bg-white border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-lg text-sm"
                            />
                            <button
                              type="button"
                              onClick={() => setShowNewPassword(!showNewPassword)}
                              className="absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600"
                            >
                              {showNewPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                            </button>
                          </div>
                        </div>
                        {passwordError && (
                          <p className="text-red-500 text-xs">{passwordError}</p>
                        )}
                      </div>
                    </div>
                    
                    {/* Action Buttons */}
                    <div className="flex gap-3 mt-6">
                      <Button 
                        disabled={isSaving} 
                        onClick={handleUpdateInfo} 
                        className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-4 py-2.5 rounded-xl flex items-center justify-center gap-2 shadow-lg hover:shadow-xl transition-all duration-300"
                      >
                        {isSaving ? <Loader2 className="h-4 w-4 animate-spin" /> : <Check className="h-4 w-4" />} 
                        Enregistrer
                      </Button>
                      <Button 
                        variant="outline" 
                        onClick={() => { setIsEditing(false); setShowPasswordInput(false); }} 
                        className="px-4 py-2.5 rounded-xl border-slate-200 hover:bg-slate-50 flex items-center gap-2"
                      >
                        <X className="h-4 w-4" /> 
                        Annuler
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {/* Profile Information Cards */}
                    <div className="grid grid-cols-1 gap-3">
                      <div className="flex items-center gap-3 p-3 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          <User className="h-4 w-4 text-blue-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-xs text-slate-500">Nom d'utilisateur</p>
                          <p className="font-medium text-slate-800">@{userInfo.username || 'Non renseigné'}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3 p-3 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors">
                        <div className="p-2 bg-green-100 rounded-lg">
                          <User className="h-4 w-4 text-green-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-xs text-slate-500">Nom complet</p>
                          <p className="font-medium text-slate-800">{userInfo.fullname || 'Non renseigné'}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3 p-3 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors">
                        <div className="p-2 bg-purple-100 rounded-lg">
                          <Mail className="h-4 w-4 text-purple-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-xs text-slate-500">Email</p>
                          <p className="font-medium text-slate-800">{userInfo.email || 'Non renseigné'}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3 p-3 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors">
                        <div className="p-2 bg-orange-100 rounded-lg">
                          <Phone className="h-4 w-4 text-orange-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-xs text-slate-500">Téléphone</p>
                          <p className="font-medium text-slate-800">{userInfo.phone || 'Non renseigné'}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3 p-3 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors">
                        <div className="p-2 bg-indigo-100 rounded-lg">
                          <Home className="h-4 w-4 text-indigo-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-xs text-slate-500">Adresse</p>
                          <p className="font-medium text-slate-800">{userInfo.address || 'Non renseignée'}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3 p-3 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors">
                        <div className="p-2 bg-pink-100 rounded-lg">
                          <MapPin className="h-4 w-4 text-pink-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-xs text-slate-500">Ville</p>
                          <p className="font-medium text-slate-800">{userInfo.city || 'Non renseignée'}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3 p-3 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors">
                        <div className="p-2 bg-teal-100 rounded-lg">
                          <Package className="h-4 w-4 text-teal-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-xs text-slate-500">Code postal</p>
                          <p className="font-medium text-slate-800">{userInfo.postalCode || 'Non renseigné'}</p>
                        </div>
                      </div>
                    </div>
                    
                    <Button 
                      onClick={() => { setIsEditing(true); setShowPasswordInput(true); }} 
                      className="w-full mt-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-4 py-3 rounded-xl flex items-center justify-center gap-2 shadow-lg hover:shadow-xl transition-all duration-300"
                    >
                      <Pencil className="h-4 w-4" /> 
                      Modifier les informations
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
          
          {/* Orders and Wishlist Section - Right Column */}
          <div className="xl:col-span-3 space-y-8">
            {/* Enhanced Orders Section */}
            <Card className="group relative overflow-hidden bg-white/80 backdrop-blur-sm border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500">
              <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 via-purple-500/5 to-indigo-500/5"></div>
              <CardContent className="relative p-8">
                <div className="flex items-center justify-between mb-8">
                  <div className="flex items-center gap-4">
                    <div className="p-3 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl shadow-lg">
                      <ShoppingCart className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-slate-800">Mes Commandes</h2>
                      <p className="text-slate-500">Suivez vos commandes et leur statut</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-sm font-medium">
                    <TrendingUp className="h-4 w-4" />
                    {orders.length} commande{orders.length !== 1 ? 's' : ''}
                  </div>
                </div>
                
                {orders.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="w-24 h-24 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <ShoppingCart className="h-12 w-12 text-slate-400" />
                    </div>
                    <h3 className="text-lg font-semibold text-slate-700 mb-2">Aucune commande pour le moment</h3>
                    <p className="text-slate-500 mb-6">Commencez votre shopping dès maintenant !</p>
                    <Link href="/products">
                      <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-6 py-2.5 rounded-xl flex items-center gap-2 shadow-lg hover:shadow-xl transition-all duration-300">
                        <ShoppingBag className="h-4 w-4" />
                        Découvrir nos produits
                        <ArrowRight className="h-4 w-4" />
                      </Button>
                    </Link>
                  </div>
                ) : (
                  <div className="space-y-6 max-h-[500px] overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-slate-300 scrollbar-track-slate-100">
                    {orders
                      .slice()
                      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
                      .map((order, idx) => (
                        <div key={order.id} className="group relative bg-gradient-to-r from-slate-50 to-white rounded-2xl border border-slate-200 p-6 hover:shadow-lg hover:border-blue-200 transition-all duration-300">
                          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-4">
                            <div className="flex items-center gap-4">
                              <div className="p-2 bg-blue-100 rounded-lg">
                                <Calendar className="h-5 w-5 text-blue-600" />
                              </div>
                              <div>
                                <h3 className="text-lg font-bold text-slate-800">Commande #{orders.length - idx}</h3>
                                <p className="text-sm text-slate-500 flex items-center gap-2">
                                  <Calendar className="h-4 w-4" />
                                  {formatDate(order.createdAt)}
                                </p>
                              </div>
                            </div>
                            <div className="flex flex-col items-end gap-2">
                              <div className="text-right">
                                <span className="text-2xl font-bold text-slate-800">{order.total} MAD</span>
                              </div>
                              <div className="flex items-center gap-2">
                                {getStatusBadge(order.status)}
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex flex-wrap gap-2 mb-4">
                            {order.paymentMethod && (
                              <span className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700 border border-blue-200">
                                <CreditCard className="h-3 w-3" />
                                {order.paymentMethod === 'credit_card' ? 'Carte bancaire' : 'À la livraison'}
                              </span>
                            )}
                            {order.free_shipping ? (
                              <span className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium bg-green-50 text-green-700 border border-green-200">
                                <Truck className="h-3 w-3" />
                                Livraison gratuite
                              </span>
                            ) : (
                              <span className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium bg-slate-50 text-slate-700 border border-slate-200">
                                <Truck className="h-3 w-3" />
                                Frais: 50 MAD
                              </span>
                            )}
                            {order.promoApplied && (
                              <span className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium bg-yellow-50 text-yellow-700 border border-yellow-200">
                                <Gift className="h-3 w-3" />
                                Promotion
                              </span>
                            )}
                          </div>
                          
                          {order.items && order.items.length > 0 && (
                            <div className="space-y-3">
                              <h4 className="text-sm font-semibold text-slate-700 flex items-center gap-2">
                                <Package className="h-4 w-4" />
                                Articles ({order.items.length})
                              </h4>
                              {order.items.map((item) => (
                                <div key={item.id} className="flex items-center gap-4 p-4 bg-white rounded-xl border border-slate-100 hover:border-blue-200 hover:shadow-md transition-all duration-300">
                                  <div className="relative">
                                    {item.product?.image ? (
                                      <img 
                                        src={(item.product as any)?.imageUrl || `/${(item.product as any)?.image}`} 
                                        alt={item.product.name} 
                                        className="w-16 h-16 object-cover rounded-lg border border-slate-200" 
                                      />
                                    ) : (
                                      <div className="w-16 h-16 flex items-center justify-center bg-slate-100 rounded-lg border border-slate-200">
                                        <ImageIcon className="h-8 w-8 text-slate-400" />
                                      </div>
                                    )}
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <h5 className="font-semibold text-slate-800 truncate">{item.product?.name || 'Produit inconnu'}</h5>
                                    <div className="flex items-center gap-4 mt-1">
                                      <span className="text-sm text-slate-500">Taille: <span className="font-medium">{item.size}</span></span>
                                      <span className="text-sm text-slate-500">Qté: <span className="font-medium">{item.quantity}</span></span>
                                    </div>
                                  </div>
                                  <div className="text-right">
                                    <div className="text-lg font-bold text-slate-800">{item.price * item.quantity} MAD</div>
                                    <div className="text-sm text-slate-500">{item.price} × {item.quantity}</div>
                                    {item.product && (
                                      <Link href={item.product.slug ? `/product/${item.product.slug}` : `/product/${item.productId}`}>
                                        <Button size="sm" className="mt-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-lg text-xs">
                                          Voir le produit
                                        </Button>
                                      </Link>
                                    )}
                                  </div>
                                </div>
                              ))}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Enhanced Wishlist Section */}
            <Card className="group relative overflow-hidden bg-white/80 backdrop-blur-sm border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500">
              <div className="absolute inset-0 bg-gradient-to-br from-pink-500/5 via-red-500/5 to-rose-500/5"></div>
              <CardContent className="relative p-8">
                <div className="flex items-center justify-between mb-8">
                  <div className="flex items-center gap-4">
                    <div className="p-3 bg-gradient-to-br from-pink-500 to-red-600 rounded-xl shadow-lg">
                      <Heart className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-slate-800">Ma Liste de Souhaits</h2>
                      <p className="text-slate-500">Vos produits favoris sauvegardés</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 bg-pink-50 text-pink-700 px-3 py-1 rounded-full text-sm font-medium">
                    <Heart className="h-4 w-4" />
                    {wishlist.length} favori{wishlist.length !== 1 ? 's' : ''}
                  </div>
                </div>
                
                {wishlist.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="w-24 h-24 bg-pink-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <Heart className="h-12 w-12 text-pink-400" />
                    </div>
                    <h3 className="text-lg font-semibold text-slate-700 mb-2">Votre liste de souhaits est vide</h3>
                    <p className="text-slate-500 mb-6">Ajoutez vos produits préférés pour les retrouver facilement !</p>
                    <Link href="/products">
                      <Button className="bg-gradient-to-r from-pink-600 to-red-600 hover:from-pink-700 hover:to-red-700 text-white px-6 py-2.5 rounded-xl flex items-center gap-2 shadow-lg hover:shadow-xl transition-all duration-300">
                        <Heart className="h-4 w-4" />
                        Découvrir nos produits
                        <ArrowRight className="h-4 w-4" />
                      </Button>
                    </Link>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    {wishlist.map((item) => (
                      <div key={item.id} className="group relative bg-white rounded-2xl border border-slate-200 p-6 hover:shadow-lg hover:border-pink-200 transition-all duration-300">
                        <Button 
                          size="icon" 
                          variant="ghost" 
                          className="absolute top-3 right-3 text-slate-400 hover:text-red-500 hover:bg-red-50 transition-colors z-10" 
                          title="Retirer de la liste" 
                          onClick={() => handleRemoveFromWishlist(item.productId)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                        
                        <div className="text-center">
                          <div className="relative mb-4">
                            {item.product?.image ? (
                              <img
                                src={(item.product as any)?.imageUrl || `/${(item.product as any)?.image}`}
                                alt={item.product.name || "Produit"}
                                className="w-20 h-20 object-cover rounded-xl mx-auto border border-slate-200 group-hover:scale-105 transition-transform duration-300"
                              />
                            ) : (
                              <div className="w-20 h-20 flex items-center justify-center bg-slate-100 rounded-xl mx-auto border border-slate-200">
                                <ImageIcon className="h-8 w-8 text-slate-400" />
                              </div>
                            )}
                          </div>
                          
                          <h5 className="font-semibold text-slate-800 mb-2 line-clamp-2">{item.product?.name || "Produit inconnu"}</h5>
                          <p className="text-lg font-bold text-slate-800 mb-4">
                            {item.product?.price ? `${item.product.price} MAD` : "Prix non disponible"}
                          </p>
                          
                          <Link href={(item as any).product?.slug ? `/product/${(item as any).product.slug}` : `/product/${item.productId}`}>
                            <Button className="w-full bg-gradient-to-r from-pink-600 to-red-600 hover:from-pink-700 hover:to-red-700 text-white px-4 py-2 rounded-xl text-sm font-medium shadow-lg hover:shadow-xl transition-all duration-300">
                              Voir le produit
                            </Button>
                          </Link>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
    </div>
  );
}